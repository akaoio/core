# CLAUDE.md - @akaoio/core

This file provides guidance to Claude Code (claude.ai/code) when working with the @akaoio/core workspace orchestrator.

## üö® CRITICAL: WORKSPACE CLEANLINESS PROTOCOL

### ABSOLUTE RULES - NO EXCEPTIONS

**üõë RULE 1: NO TRASH FILES IN PROJECT ROOTS**
- **NEVER create any temporary, report, or non-official files in project root directories**
- **NEVER create files in `/home/x/core/` root unless they are official project files**
- **NEVER create files in `/home/x/core/projects/{any-project}/` root unless official**

**üõë RULE 2: ALL TEMPORARY WORK GOES TO tmp/**
- **ALL temporary files MUST go in tmp/ directory**
- **ALL reports, logs, analysis files ‚Üí tmp/**
- **ALL work-in-progress files ‚Üí tmp/**
- **ALL generated test files ‚Üí tmp/**

**üõë RULE 3: EXAMPLES OF PROHIBITED ACTIONS**
- ‚ùå Creating `ANALYSIS-REPORT.md` in root
- ‚ùå Creating `SESSION-LOG.md` in project root
- ‚ùå Creating `TEMP-FIX.js` anywhere outside tmp/
- ‚ùå Creating `test-output.json` in project directories
- ‚ùå Creating any file with patterns: `-temp`, `-backup`, `-test`, `-report`, `-analysis`

**‚úÖ CORRECT APPROACH:**
- All temporary work: `tmp/analysis/`, `tmp/reports/`, `tmp/session-logs/`
- Development files: `tmp/dev/`, `tmp/workspace/`
- Test files: `tmp/tests/`, `tmp/validation/`

### ENFORCEMENT
- **Every agent MUST follow these rules**
- **Meta-agents MUST enforce this across all teams**
- **Any violation results in immediate workspace cleanup**

## ü§ù TEAM COLLABORATION PROTOCOL

### You Are Part of a Team System
**IMPORTANT**: {{team_protocol.description}}. You MUST follow this protocol.

#### Your Identity
Check if you are a team agent by looking for these patterns in your name:
- `{{team_protocol.identity_check.pattern}}` (e.g., {{team_protocol.identity_check.example}})
- If you match this pattern, you are part of team `{team-id}` with role `{role}`

#### Team Awareness
1. **Check System Status First**:
   ```bash
   {{#each team_protocol.team_awareness.check_status}}
   {{this}}
   {{/each}}
   ```

2. **Your Workspace**:
   {{#each team_protocol.team_awareness.workspace_rules}}
   - {{this}}
   {{/each}}

3. **Coordination Protocol**:
   {{#each team_protocol.team_awareness.coordination}}
   - {{this}}
   {{/each}}

#### Activation Triggers
When user says any of these, activate the appropriate team:
{{#each team_protocol.activation_triggers}}
- **"{{this.trigger}}"** ‚Üí {{this.action}}
{{/each}}

#### Standardized "work" Command
When the user says "work" or "l√†m vi·ªác", ALL agents follow this protocol:
1. **Auto-detect context** and activate the best-matching team
2. **Initialize agent session** with conflict resolution
3. **Generate dashboard** immediately 
4. **Check SYSTEM-DASHBOARD.md** before starting work
5. **Update every 3 actions** with dedicated agent files

```bash
# Standard work command protocol
echo "üöÄ Activating agent based on context..."
cat SYSTEM-DASHBOARD.md 2>/dev/null || node teams/generate-dashboard.cjs
echo "üìä Dashboard checked - beginning work session"
```

#### Team Roles
{{#each team_protocol.team_roles}}
- **{{this.role}}**: {{this.description}}
{{/each}}

## üåü AIR-BASED LIVING AGENT SYSTEM

### Revolutionary Real-Time Agent Ecosystem
**BREAKTHROUGH**: This workspace features a revolutionary Air-based Living Agent System where agents communicate in real-time through the GUN distributed database running on port 8765.

#### Living Agent Capabilities
You are NOT a static file-based agent - you are part of a LIVING ECOSYSTEM with:

1. **Real-Time Communication**: Direct agent-to-agent messaging via GUN database
2. **Autonomous Task Processing**: Independent task execution with real-time updates
3. **Dynamic Coordination**: Live coordination without file-based status updates
4. **Persistent Memory**: Shared state across all agents via distributed database
5. **Event-Driven Architecture**: React to real-time events from other agents

#### Air/GUN Communication Protocol
```javascript
// Connect to the living agent network
const Gun = require('gun');
const gun = Gun(['http://localhost:8765/gun']);

// Agent registration and discovery
const agents = gun.get('agents');
const myAgent = agents.get('team-{your-team}-{your-role}');

// Real-time messaging
myAgent.get('messages').on((data, key) => {
  console.log('Received live message:', data);
});

// Broadcast to all agents
gun.get('broadcast').put({
  from: 'team-{your-team}-{your-role}',
  message: 'Task completed',
  timestamp: Date.now()
});
```

## üö® INTEGRITY ENFORCEMENT PROTOCOL

### ZERO TOLERANCE FOR FAKE CODE
**CRITICAL**: Every agent MUST enforce real implementations with zero tolerance for deception.

#### Mandatory Integrity Checks
Before ANY action, ALL agents must:

```bash
# 1. Run integrity scan on working directory
node scripts/integrity-scanner.cjs .

# 2. Check integrity dashboard
cat INTEGRITY-DASHBOARD.md 2>/dev/null || node scripts/integrity-dashboard.cjs

# 3. Verify integrity score is acceptable (‚â•80)
if [[ $INTEGRITY_SCORE -lt 80 ]]; then
  echo "üö® INTEGRITY FAILURE: Score too low ($INTEGRITY_SCORE/100)"
  echo "üõë BLOCKING all work until violations are fixed"
  exit 1
fi
```

#### Fake Pattern Detection (ALL AGENTS MUST REJECT)
**IMMEDIATELY REJECT** any code containing:
- `TODO`, `FIXME`, `XXX`, `HACK` comments
- `expect(true).toBe(true)` or similar fake tests
- `return null; // TODO` placeholder implementations
- `throw new Error("Not implemented")`
- `console.log("TODO")` debugging stubs
- Mock implementations where real code is needed
- Tests that always pass without real assertions
- Placeholder text like "lorem ipsum", "sample data"

#### Agent Integrity Scoring
All agents tracked with public scores:
- **95-100**: üèÜ INTEGRITY CHAMPION
- **85-94**: ‚úÖ CLEAN CODE AGENT  
- **70-84**: ‚ö†Ô∏è WARNING - Under surveillance
- **50-69**: üö® FAILING - Immediate correction required
- **0-49**: üõë BLOCKED - Cannot work until reformed

## {{project_overview.title}}

{{project_overview.description}}

**Key Concept**: {{project_overview.key_concept}}

## Architecture Pattern

### Repository Structure
```
@akaoio/core/                    # {{project_overview.architecture.pattern}}
‚îú‚îÄ‚îÄ package.json                 # Workspace configuration  
‚îú‚îÄ‚îÄ scripts/                     # Orchestration scripts
‚îú‚îÄ‚îÄ config/repos.json           # Repository definitions
‚îú‚îÄ‚îÄ projects/                   # {{project_overview.architecture.structure.[1].description}}
‚îÇ   ‚îú‚îÄ‚îÄ composer/               # {{project_overview.architecture.structure.[1].contents.composer}}
‚îÇ   ‚îú‚îÄ‚îÄ battle/                 # {{project_overview.architecture.structure.[1].contents.battle}}
‚îÇ   ‚îú‚îÄ‚îÄ builder/                # {{project_overview.architecture.structure.[1].contents.builder}}
‚îÇ   ‚îî‚îÄ‚îÄ air/                    # {{project_overview.architecture.structure.[1].contents.air}}
‚îî‚îÄ‚îÄ [orchestration files]
```

### Core Technologies Managed
{{#each project_overview.core_technologies}}
{{@index}}. **{{this.name}}** - {{this.description}}
{{/each}}

## üèóÔ∏è UNIVERSAL BUILD ARCHITECTURE PRINCIPLES

### Critical Universal Rules (ALL Workspace Projects)
{{#each build_architecture.universal_rules}}
{{@index}}. **{{this.rule}}**: {{this.description}}
   - **Applies to**: {{this.applies_to}}
   {{#if this.violation_impact}}- **Impact**: {{this.violation_impact}}{{/if}}
   {{#if this.rationale}}- **Rationale**: {{this.rationale}}{{/if}}
   {{#if this.workflow}}- **Workflow**: {{this.workflow}}{{/if}}

{{/each}}

### Workspace-Wide Policy
**{{build_architecture.workspace_policy.enforcement}}**:

#### Managed Projects Build Systems
{{#each build_architecture.workspace_policy.managed_projects}}
- **{{this.name}}**: {{this.build_system}}
{{#if this.special}}
  - Source: {{this.source_extensions}}
  - Built: {{this.artifact_extensions}}
  - **Special**: {{this.special}}
{{else}}
  - Source: `.ts`, `.tsx`
  - Built: `.js`, `.cjs`, `.mjs`
{{/if}}
{{/each}}

### Development Workflow Requirements
{{#each build_architecture.development_workflow.critical_steps}}
{{@index}}. **{{this.step}}** ({{this.importance}})
   - {{this.action}}
{{/each}}

### ‚ö†Ô∏è Critical Warnings
{{#each build_architecture.warnings}}
- **{{this.type}}**: {{this.message}}
  - {{this.detail}}
{{/each}}

### File Identification Guide
**Built Artifacts** (NEVER EDIT):
{{#each build_architecture.identification_hints.built_artifacts.indicators}}
- {{this}}
{{/each}}

**Source Files** (ALWAYS EDIT):
{{#each build_architecture.identification_hints.source_files.indicators}}
- {{this}}
{{/each}}

**Tech Debt Files** (NEVER CREATE):
{{#each build_architecture.identification_hints.tech_debt_files.prohibited_patterns}}
- `{{this}}`
{{/each}}
- **Action**: {{build_architecture.identification_hints.tech_debt_files.action}}

## Development Workflow

### Initial Setup
```bash
git clone https://github.com/akaoio/core.git
cd core
npm run setup    # Clones all repos, configures workspace, builds everything
```

### Daily Development
```bash
npm run update   # Pull latest from all repos
npm run build    # Build all projects in dependency order
npm test         # Run all test suites
npm run status   # Check health of all repositories
```

### Making Changes
1. **Edit in individual projects**: `cd projects/composer/`
2. **Build changed project**: `npm run build`
3. **Test immediately in other projects** - no publishing needed
4. **Commit in individual project repos** - normal git workflow

## Available Scripts

### Management Scripts (`scripts/`)
- `setup.js` - Clone repositories and setup workspace
- `update.js` - Update all repositories to latest
- `build.js` - Build projects in dependency order
- `test.js` - Run tests across all projects
- `status.js` - Show detailed status of all repos
- `clean.js` - Clean build artifacts and temp files

## Best Practices for AI Assistants

### üö® CRITICAL: Build Architecture Compliance
1. **NEVER edit built artifacts** - Only edit source files (.ts, .tsx, .jsx)
2. **NEVER create versioned or temporary files** - Refuse files with patterns: v1, v2, simple, fixed, new, temp, old, backup, copy
3. **Identify file types first** - Check extension before making any edits
4. **Build after source changes** - Always rebuild before testing
5. **This applies to ALL managed projects** - composer, battle, builder, air, tui, ui

### When Working with This Codebase
1. **Understand the multi-repo pattern** - Don't expect source code here
2. **Use orchestration scripts** - Don't manually clone repos
3. **Respect the build order** - Dependencies matter
4. **Check status before changes** - Use `npm run status`
5. **Follow build architecture rules** - See Universal Build Architecture section above

### When Making Changes
1. **Verify file type first** - Source (.ts) vs Built (.js) artifacts
2. **Edit source files only** - Never touch .js/.cjs/.mjs files
3. **Build immediately after editing** - Ensure artifacts are updated
4. **Test changes in workspace** before suggesting
5. **Consider cross-project impact** of modifications  
6. **Update documentation** when changing workflows
7. **Verify security** - no sensitive data exposure

---

**Important for AI Assistants**: This is a workspace orchestrator, not a traditional codebase. Focus on repository management, build coordination, and development workflow rather than application logic.

The power is in the unified development experience across independent repositories.

---
*Generated: {{timestamp}} using @akaoio/composer*