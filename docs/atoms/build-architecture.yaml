name: build-architecture
title: Universal Build Architecture Principles
description: |
  Fundamental build architecture rules that apply to ALL repositories managed by the @akaoio/core workspace orchestrator.

universal_rules:
  - rule: "NEVER edit built artifacts"
    description: "Never edit .js, .cjs, .mjs files across ANY project in the workspace - they are built artifacts"
    applies_to: "ALL managed repositories (composer, battle, builder, air, tui, ui)"
    violation_impact: "Changes will be overwritten on next build, causing confusion and lost work"
  
  - rule: "Source-first development"
    description: "Always edit .ts, .tsx, .jsx files (source files) in ALL managed repositories"
    applies_to: "ALL TypeScript/JavaScript projects in the workspace"
    rationale: "Source files are the single source of truth for all logic and functionality"
  
  - rule: "Build-first testing"
    description: "After editing source files, always rebuild before testing built artifacts"
    applies_to: "ALL projects with build processes"
    workflow: "Edit source → Build → Test → Commit"

workspace_policy:
  enforcement: "This rule applies to all repositories managed by the orchestrator"
  managed_projects:
    - name: "composer"
      build_system: "TypeScript → JavaScript"
      source_extensions: [".ts", ".tsx"]
      artifact_extensions: [".js", ".cjs", ".mjs"]
    - name: "battle"
      build_system: "TypeScript → JavaScript" 
      source_extensions: [".ts", ".tsx"]
      artifact_extensions: [".js", ".cjs", ".mjs"]
    - name: "builder"
      build_system: "TypeScript → JavaScript"
      source_extensions: [".ts", ".tsx"]
      artifact_extensions: [".js", ".cjs", ".mjs"]
    - name: "air"
      build_system: "TypeScript → JavaScript"
      source_extensions: [".ts", ".tsx"]
      artifact_extensions: [".js", ".cjs", ".mjs"]
    - name: "tui"
      build_system: "TypeScript → JavaScript"
      source_extensions: [".ts", ".tsx"]
      artifact_extensions: [".js", ".cjs", ".mjs"]
    - name: "ui"
      build_system: "TypeScript → JavaScript"
      source_extensions: [".ts", ".tsx"]
      artifact_extensions: [".js", ".cjs", ".mjs"]

development_workflow:
  critical_steps:
    - step: "Identify file type before editing"
      action: "Check file extension - if .js/.cjs/.mjs, find corresponding .ts source file"
      importance: "CRITICAL"
    
    - step: "Edit source files only"
      action: "Make all changes in .ts/.tsx/.jsx files"
      importance: "REQUIRED"
      
    - step: "Build immediately after editing"
      action: "Run build command for the project (npm run build, tsc, etc.)"
      importance: "REQUIRED"
      
    - step: "Test built artifacts"
      action: "Test the built .js files, not the source .ts files"
      importance: "VERIFICATION"

warnings:
  - type: "CRITICAL"
    message: "Editing built artifacts will cause loss of work"
    detail: "Built files are regenerated from source files during build process"
    
  - type: "WORKSPACE_INTEGRITY"
    message: "Inconsistent edits across projects cause integration failures"
    detail: "All projects must follow same source-first development pattern"
    
  - type: "AI_ASSISTANT"
    message: "AI assistants working with ANY project need to understand this fundamental rule"
    detail: "Failure to follow this rule leads to confusion and broken development workflow"

identification_hints:
  built_artifacts:
    indicators:
      - "Files in dist/ directories"
      - "Files with .js extension when .ts equivalent exists"
      - "Generated header comments (e.g., 'Generated by TypeScript')"
      - "Minified or transpiled code patterns"
    
  source_files:
    indicators:
      - "TypeScript syntax and typing"
      - "Import statements using .ts extensions"
      - "Raw, unprocessed code"
      - "Located in src/ directories"